/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.User;

use Runtime.CoreProvider;
use Runtime.RuntimeUtils;
use Runtime.Crypt.JWT;


struct AuthToken extends CoreProvider
{
	int created = 0;
	int expire = 0;
	int user_id = 0;
	string login = "";
	string session_key = "";
	string token_str = "";
	
	
	
	/**
	 * Read token
	 */
	static AuthToken read(string auth_token_str, string auth_public_key)
	{
		int time = @.time();
		AuthToken auth_token = static::parse(auth_token_str, auth_public_key);
		if (auth_token == null) return null;
		if (time > auth_token.expire) return null;
		return auth_token;
	}
	
	
	
	/**
	 * Parse token by auth_public_key
	 */
	lambda AuthToken parse(string auth_token_str, string auth_public_key)
	{
		/* Decode jwt */
		Dict d = JWT::decode(auth_token_str, auth_public_key, 'RS256');
		if (d == null) return null;
		return new AuthToken
		{
			"created": d.get("c", 0, "int"),
			"expire": d.get("e", 0, "int"),
			"user_id": d.get("i", 0, "int"),
			"login": d.get("u", 0, "string"),
			"session_key": d.get("s", 0, "string"),
			"token_str": auth_token_str,
		};
	}
	
	
	
	/**
	 * Create new token
	 */
	lambda AuthToken sign(string auth_private_key, AuthToken token)
	{
		Dict d = {
			"c": token.created,
			"e": token.expire,
			"u": token.login,
			"i": token.user_id,
			"s": token.session_key,
		};		
		string auth_token_str = JWT::encode(d, auth_private_key, 'RS256');
		return token.copy({ "token_str": auth_token_str });
	}
	
	
}