/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.User;

use Runtime.MessageRPC;
use Runtime.RuntimeUtils;
use Runtime.User.AuthToken;
use Runtime.Web.Http.Cookie;
use Runtime.Web.UI.RenderContainer;


class Middleware
{
	
	#ifdef BACKEND then
	
	/**
	 * Check auth
	 */
	static async RenderContainer checkAuth(RenderContainer container)
	{
		string auth_cookie_name = (string) @.config(["providers", "Runtime.User", "AuthToken", "cookie_name"]);
		
		Cookie cookie = container->getCookie( auth_cookie_name, false );
		if (cookie)
		{
			string auth_token_str = cookie.value;
			string auth_public_key = (string) @.config(["providers", "Runtime.User", "AuthToken", "public_key"]);
			AuthToken auth_token = AuthToken::read(auth_token_str, auth_public_key);
			
			/* Set auth token */
			if (auth_token)
			{
				container <= layout <= pocket <= container.layout.pocket.setIm(classof AuthToken, auth_token);
				
				int time = @.time();
				int update_token_time = (int) @.config(["providers", "Runtime.User", "AuthToken", "update"], 3600);
				
				if (time - update_token_time > auth_token.created)
				{
					MessageRPC msg = await @->sendMessage
					(
						new MessageRPC
						{
							"api_name": "Runtime.User",
							"space_name": "Runtime.Auth.SSO",
							"method_name": "updateToken",
							"data":
							{
								"token_str": auth_token.token_str,
							}
						}
					);
					
					if (msg->isSuccess())
					{
						auth_token = msg.response;
						container = container->setCookie
						(
							new Cookie
							{
								"name": auth_cookie_name,
								"value": auth_token.token_str,
								"expire": auth_token.expire,
								"path": "/",
								"httponly": true,
							}
						);
					}
				}
			}
			else
			{
				container = container->removeCookie(auth_cookie_name);
			}
		}
		
		return container;
	}
	
	#endif
	
}